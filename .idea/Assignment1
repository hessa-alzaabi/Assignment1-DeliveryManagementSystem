class Recipient:
    def __init__(self, name, contact, street, city, country):
        """Initialize recipient details with name, contact, and address information."""
        self._name = name
        self._contact = contact
        self._street = street
        self._city = city
        self._country = country

    # Getter methods
    def get_name(self):
        return self._name
    def get_contact(self):
        return self._contact
    def get_street(self):
        return self._street
    def get_city(self):
        return self._city
    def get_country(self):
        return self._country

    # Setter methods
    def set_name(self, name):
        self._name = name
    def set_contact(self, contact):
        self._contact = contact
    def set_street(self, street):
        self._street = street
    def set_city(self, city):
        self._city = city
    def set_country(self, country):
        self._country = country

    def format_address(self):
        """Return a formatted string of the recipient's address."""
        return f"{self._street}, {self._city}, {self._country}"

class Delivery:
    def __init__(self, order_num, ref_num, date, method, dimensions, weight):
        """Initialize delivery details including order information, method, and package dimensions."""
        self._order_num = order_num
        self._ref_num = ref_num
        self._date = date
        self._method = method
        self._dimensions = dimensions
        self._weight = weight

    # Getter methods
    def get_order_num(self):
        return self._order_num
    def get_ref_num(self):
        return self._ref_num
    def get_date(self):
        return self._date
    def get_method(self):
        return self._method
    def get_dimensions(self):
        return self._dimensions
    def get_weight(self):
        return self._weight

    # Setter methods
    def set_order_num(self, num):
        self._order_num = num
    def set_ref_num(self, num):
        self._ref_num = num
    def set_date(self, date):
        self._date = date
    def set_method(self, method):
        self._method = method
    def set_dimensions(self, dim):
        self._dimensions = dim
    def set_weight(self, weight):
        self._weight = weight

    def calculate_shipping_cost(self):
        """Placeholder method to calculate shipping cost based on weight and size."""
        pass

class Item:
    def __init__(self, code, desc, qty, unit_price, total_price):
        """Initialize item details including code, description, quantity, and pricing."""
        self._code = code
        self._desc = desc
        self._qty = qty
        self._unit_price = unit_price
        self._total_price = total_price

    # Getter methods
    def get_code(self):
        return self._code
    def get_desc(self):
        return self._desc
    def get_qty(self):
        return self._qty
    def get_unit_price(self):
        return self._unit_price
    def get_total_price(self):
        return self._total_price

    # Setter methods
    def set_code(self, code):
        self._code = code
    def set_desc(self, desc):
        self._desc = desc
    def set_qty(self, qty):
        self._qty = qty
    def set_unit_price(self, price):
        self._unit_price = price
    def set_total_price(self, price):
        self._total_price = price

    def update_quantity(self, new_qty):
        """Placeholder method to update quantity and adjust total price."""
        pass

class Invoice:
    def __init__(self, subtotal, taxes, total_charges, currency):
        """Initialize invoice details, including payment status."""
        self._subtotal = subtotal
        self._taxes = taxes
        self._total_charges = total_charges
        self._currency = currency
        self._payment_status = "Unpaid"

    # Getter methods
    def get_subtotal(self):
        return self._subtotal
    def get_taxes(self):
        return self._taxes
    def get_total_charges(self):
        return self._total_charges
    def get_currency(self):
        return self._currency
    def get_payment_status(self):
        return self._payment_status

    # Setter methods
    def set_subtotal(self, amount):
        self._subtotal = amount
    def set_taxes(self, amount):
        self._taxes = amount
    def set_total_charges(self, amount):
        self._total_charges = amount
    def set_currency(self, currency):
        self._currency = currency
    def set_payment_status(self, status):
        self._payment_status = status

    def generate_receipt(self):
        """Placeholder method to generate a formatted receipt."""
        pass

# Create and initialize instances of classes
recipient1 = Recipient("Sarah Johnson", "sarah.johnson@example.com", "45 Knowledge Avenue", "Dubai", "UAE")
delivery1 = Delivery("DEL123456789", "DN-2025-001", "January 25, 2025", "Courier", "", "7 kg")

items1 = [
    Item("ITM001", "Wireless Keyboard", 1, 100.00, 100.00),
    Item("ITM002", "Wireless Mouse & Pad Set", 1, 75.00, 75.00),
    Item("ITM003", "Laptop Cooling Pad", 1, 120.00, 120.00),
    Item("ITM004", "Camera Lock", 3, 15.00, 45.00)
]

invoice1 = Invoice(270.00, 13.50, 283.50, "AED")

# Function to generate and display the delivery note
def generate_delivery_note(recipient, delivery, items, invoice):
    print("Recipient Details:")
    print(f"Name: {recipient.get_name()}")
    print(f"Contact: {recipient.get_contact()}")
    print(f"Delivery Address: {recipient.format_address()}\n")

    print("Delivery Information:")
    print(f"Order Number: {delivery.get_order_num()}")
    print(f"Reference Number: {delivery.get_ref_num()}")
    print(f"Delivery Date: {delivery.get_date()}")
    print(f"Delivery Method: {delivery.get_method()}")
    print(f"Total Weight: {delivery.get_weight()}\n")

    print("Summary of Items Delivered:")
    print("| Item Code | Description                 | Quantity | Unit Price | Total Price |")
    for item in items:
        print(f"| {item.get_code()} | {item.get_desc():<25} | {item.get_qty():>8} | {item.get_unit_price():>10.2f} | {item.get_total_price():>11.2f} |")

    print("\nFinancial Information:")
    print(f"Subtotal: {invoice.get_currency()} {invoice.get_subtotal():.2f}")
    print(f"Taxes and Fees: {invoice.get_currency()} {invoice.get_taxes():.2f}")
    print(f"Total Charges: {invoice.get_currency()} {invoice.get_total_charges():.2f}")

# Generate and display the delivery note
generate_delivery_note(recipient1, delivery1, items1, invoice1)
